You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.

The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.

For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.

public class ListNode {
    int val;
    ListNode next;
    ListNode(int val) {
        this.val = val;
    }
}

public ListNode deleteMiddleNode(ListNode head) {
    if (head == null || head.next == null) {
        // The list is empty or has only one node (no middle node to delete).
        return null;
    }

    ListNode slow = head;
    ListNode fast = head;
    ListNode prev = null;

    // Move the fast pointer two steps at a time and the slow pointer one step at a time.
    while (fast != null && fast.next != null) {
        fast = fast.next.next;
        prev = slow;
        slow = slow.next;
    }

    // Delete the middle node by updating the references in the linked list.
    prev.next = slow.next;

    return head;
}
